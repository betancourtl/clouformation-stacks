AWSTemplateFormatVersion: 2010-09-09

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpc
  Ipv6VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  # Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: internet-gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: nat
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ## Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: 10.0.1.0/24 - us-east-1a - public
        - Key: private
          Value: "false"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: 10.0.2.0/24 - us-east-1b - public
        - Key: private
          Value: "false"
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: 10.0.3.0/24 - us-east-1c - public
        - Key: private
          Value: "false"
  PublicACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: public-acl
      VpcId: !Ref VPC
  PublicSubnet1ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicACL
      SubnetId: !Ref PublicSubnet3
  PublicNetworkACLEntryIn80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
  PublicNetworkACLEntryIn443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 200
  PublicNetworkACLEntryIn22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300
  PublicNetworkACLEntryInCustom:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 400
  PublicNetworkACLEntryOutAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PublicACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public-route-table
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  ## Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1d
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: 10.0.4.0/24 - us-east-1d - private
        - Key: private
          Value: "true"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1e
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      Tags:
        - Key: Name
          Value: 10.0.5.0/24 - us-east-1e - private
        - Key: private
          Value: "true"
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1f
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      Tags:
        - Key: Name
          Value: 10.0.6.0/24 - us-east-1f - private
        - Key: private
          Value: "true"
  PrivateACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: private-acl
      VpcId: !Ref VPC
  PrivateSubnet1ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3ACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateACL
      SubnetId: !Ref PrivateSubnet3
  PrivateNetworkACLEntryInAllIPV4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PrivateACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateNetworkACLEntryOutAllIPV4:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref PrivateACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  PrivateNetworkACLEntryInAllIPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: ::/0
      NetworkAclId: !Ref PrivateACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200
  PrivateNetworkACLEntryOutAllIPV6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Ipv6CidrBlock: ::/0
      Egress: true
      NetworkAclId: !Ref PrivateACL
      Protocol: -1
      RuleAction: allow
      RuleNumber: 200
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: private-route-table
      VpcId: !Ref VPC
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable
  # Security Groups
  SecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPC Security Group
  SecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DB Security Group
Outputs:
  PublicSubnet1ID:
    Description: Public subnet ID
    Value: !Ref PublicSubnet1
  PublicSubnet2ID:
    Description: Public subnet ID
    Value: !Ref PublicSubnet2
  PublicSubnet3ID:
    Description: Public subnet ID
    Value: !Ref PublicSubnet3
  PrivateSubnet1ID:
    Description: Private subnet ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2ID:
    Description: Private subnet ID
    Value: !Ref PrivateSubnet2
  PrivateSubnet3ID:
    Description: Private subnet ID
    Value: !Ref PrivateSubnet3
  SecurityGroupEC2:
    Description: SecurityGroupEC2
    Value: !Ref SecurityGroupEC2
  SecurityGroupDB:
    Description: SecurityGroupDB
    Value: !Ref SecurityGroupDB
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
